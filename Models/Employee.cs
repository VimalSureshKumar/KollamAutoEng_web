using System.ComponentModel.DataAnnotations;
using System.Numerics;

namespace KollamAutoEng_web.Models
{
    // Enum to represent the status of an employee (either Active or Inactive)
    public enum Status
    {
        Active, Inactive
    }

    // Employee class representing the employee details
    public class Employee
    {
        // Primary key for the Employee entity, automatically generated by the database
        [Key] // Indicates that this is the primary key
        [Display(Name = "Employee ID")] // Specifies how the field will be labeled in the UI
        public int EmployeeId { get; set; }

        // Employee's first name - required field with minimum and maximum length constraints
        // Only letters and single spaces allowed between words
        [Required(ErrorMessage = "Please enter Employee First Name")] // Field must be filled out
        [MaxLength(25, ErrorMessage = "First Name cannot exceed 25 characters.")] // Limits the maximum number of characters to 25
        [MinLength(2, ErrorMessage = "First Name must be at least 2 characters long.")] // Ensures at least 2 characters
        [RegularExpression("^[A-Za-z]+( [A-Za-z]+)*$", ErrorMessage = "Only letters and single spaces between words are allowed.")] // Restricts input to letters and single spaces
        [Display(Name = "First Name")] // Display name in UI
        public string FirstName { get; set; }

        // Employee's last name - required field with minimum and maximum length constraints
        // Only letters and single spaces allowed between words
        [Required(ErrorMessage = "Please enter Employee Last Name")] // Field must be filled out
        [MaxLength(25, ErrorMessage = "Last Name cannot exceed 25 characters.")] // Limits the maximum number of characters to 25
        [MinLength(2, ErrorMessage = "Last Name must be at least 2 characters long.")] // Ensures at least 2 characters
        [RegularExpression("^[A-Za-z]+( [A-Za-z]+)*$", ErrorMessage = "Only letters and single spaces between words are allowed.")] // Restricts input to letters and single spaces
        [Display(Name = "Last Name")] // Display name in UI
        public string LastName { get; set; }

        // Employee's phone number - optional, validated with custom phone number format rules for New Zealand and India
        [DataType(DataType.PhoneNumber)] // Specifies the data type as a phone number
        [MaxLength(17)] // Limits the phone number to a maximum of 17 characters
        [RegularExpression(@"^\+((64 (\b(2[0-6])\b)-\d{3,4}-\d{4,5})|(91 \d{5}-\d{5}))$",
            ErrorMessage = "Phone Number is not valid.\n\n" +
            "For New Zealand:\n" +
            "+64 followed by a 2-digit area code (20-26),\n" +
            "a 3- or 4-digit local number,\n" +
            "and a 4- or 5-digit subscriber number.\n" +
            "(e.g., +64 20-345-6789 or +64 22-1234-5678).\n\n" +
            "For India:\n" +
            "+91 followed by two groups of 5 digits separated by a hyphen.\n" +
            "(e.g., +91 75920-12345).")] // Regular expression to validate specific formats for New Zealand and India phone numbers
        [Display(Name = "Phone Number")] // Display name in UI
        public string PhoneNumber { get; set; }

        // Employee's status (Active or Inactive)
        [Display(Name = "Status")] // Display name in UI
        public Status? Status { get; set; }

        // Employee's pay - required, validated as a currency, and must fall within a specified range
        [DataType(DataType.Currency)] // Specifies that the field should be treated as currency
        [Required(ErrorMessage = "Please enter Employee Pay")] // Field must be filled out
        [RegularExpression("^(0|[1-9][0-9]*)(\\.[0-9]+)?$", ErrorMessage = "Please enter a valid positive number.")] // Validates that the input is a valid number, including decimals
        [Range(0.99, 50000, ErrorMessage = "Please enter a value between 0.99 and 50,000.")] // Ensures the pay value falls between 0.99 and 50,000
        [Display(Name = "Pay")] // Display name in UI
        public decimal Pay { get; set; }

        // Employee's working hours - required, must fall within a specified range, and allows up to two decimal places
        [Required(ErrorMessage = "Please enter Employee Hours")] // Field must be filled out
        [Range(1, 144, ErrorMessage = "Please enter a value between 1 and 144 hours.")] // Ensures hours fall within the range 1 to 144
        [RegularExpression(@"^\d+(\.\d{1,2})?$", ErrorMessage = "Please enter a valid decimal value with up to two decimal places.")] // Ensures the input is a valid decimal with up to 2 decimal places
        [Display(Name = "Hours")] // Display name in UI
        public decimal Hours { get; set; }

        // A collection of appointments associated with the employee (optional)
        public virtual ICollection<Appointment>? Appointments { get; set; } // Navigational property for related appointments
    }
}
